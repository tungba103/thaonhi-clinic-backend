// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionNameType {
  GET_USER
  GET_USERS
  CREATE_USER
  UPDATE_USER
  // DELETE_USER

  GET_ROLE
  GET_ROLES
  CREATE_ROLE
  UPDATE_ROLE
  // DELETE_ROLE
}

model User {
  id        Int     @id @default(autoincrement())
  username  String
  password  String
  name      String
  avatarUrl String? @map("avatar_url")

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  RefreshToken RefreshToken[]
  UsersOnRoles UsersOnRoles[]

  @@unique([username])
  @@map("users")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  value      String
  userId     Int      @map("user_id")

  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([value])
  @@map("refresh_tokens")
}

model Role {
  id          Int      @id @default(autoincrement())
  code        String
  name        String
  description String?

  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  rolePermissions RolesOnPermissions[]
  roleUsers       UsersOnRoles[]

  @@unique([code])
  @@map("roles")
}

model Permission {
  id          Int                @id @default(autoincrement())
  code        PermissionNameType
  description String?
  name        String
  
  isActive    Boolean            @default(true) @map("is_active")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @updatedAt @map("updated_at")

  permissionRoles RolesOnPermissions[]

  @@unique([code])
  @@map("permissions")
}

model UsersOnRoles {
  id         Int             @id @default(autoincrement())
  userId     Int             @map("user_id")
  roleId     Int             @map("role_id")

  isActive   Boolean         @default(true) @map("is_active")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @default(now()) @updatedAt @map("updated_at")

  user       User @relation(fields: [userId], references: [id])
  role       Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("users_roles")
}

model RolesOnPermissions {
  id           Int                   @id @default(autoincrement())
  roleId       Int                   @map("role_id")
  permissionId Int                   @map("permission_id")

  isActive   Boolean         @default(true) @map("is_active")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @default(now()) @updatedAt @map("updated_at")

  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("roles_permissions")
}